/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: Czech Theater
 * Environment: Production
 * Id: fb599585-baec-0077-1624-981d3321fff0
 * 
 * -------------------------------------------------------------------------------
 */


            import type { TypeCodenames } from '../system/types.generated.js';
import type { Elements, IContentItem } from '@kontent-ai/delivery-sdk';
import type { CallToActionButtonType } from '../types/call-to-action-button-type.generated.js';
import type { CollectionCodenames } from '../system/collections.generated.js';
import type { CoreType } from '../system/types.generated.js';
import type { FixedSizeImageType } from '../types/fixed-size-image-type.generated.js';
import type { ImageWithCaptionType } from '../types/image-with-caption-type.generated.js';
import type { LanguageCodenames } from '../system/languages.generated.js';
import type { WorkflowCodenames, WorkflowStepCodenames } from '../system/workflows.generated.js';
           
            /*
* Type representing codename of 'Value' type
*/
            export type ValueTypeCodename = keyof Pick<Record<TypeCodenames, null>, "value">;

            /*
* Typeguard for codename of 'Value' type
*/
            export function isValueTypeCodename(value: string | undefined | null): value is ValueTypeCodename {
                return typeof value === 'string' && value === ('value' satisfies ValueTypeCodename);
            }

/*
    * Value
    *
    * Id: eb8249ce-99d3-49f9-950c-9fbd5b4d4aa4
* Codename: value
    */
export type ValueType = IContentItem<
{
/*
    * Name
    *
    * Codename: name
* Id: 4efac830-7c33-4859-9359-10d83195d06f
* Type: text
* Required: true
    */
                readonly name: Elements.TextElement;

/*
    * Icon
    *
    * Codename: icon
* Id: b1cd0a4c-9cab-4ee7-b706-e69b7758cf8f
* Type: text
* Required: false
* Guidelines: A material design icon to describe the value. Use camel case starting with "mdi".
    */
                readonly icon: Elements.TextElement;

/*
    * Description
    *
    * Codename: description
* Id: 18a90a02-36a1-498a-9748-dfac664bb5e7
* Type: rich_text
* Required: true
* Allowed content types: call_to_action_button, fixed_size_image, image_with_caption
    */
                readonly description: Elements.RichTextElement<CallToActionButtonType | FixedSizeImageType | ImageWithCaptionType>;}, 
ValueTypeCodename, LanguageCodenames, CollectionCodenames, WorkflowCodenames, WorkflowStepCodenames>

/*
* Type representing all available element codenames for Value
*/
export type ValueTypeElementCodenames = 'name' | 'icon' | 'description';;

/*
    * Type guard for Value
    *
    * Id: eb8249ce-99d3-49f9-950c-9fbd5b4d4aa4
* Codename: value
    */
export function isValueType(item: IContentItem | undefined | null): item is ValueType {
                return item?.system.type === ('value' satisfies ValueTypeCodename);
            };



            