/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: Czech Theater
 * Environment: Production
 * Id: fb599585-baec-0077-1624-981d3321fff0
 * 
 * -------------------------------------------------------------------------------
 */


            import type { TypeCodenames } from '../system/types.generated.js';
import type { Elements, IContentItem } from '@kontent-ai/delivery-sdk';
import type { CollectionCodenames } from '../system/collections.generated.js';
import type { CoreType } from '../system/types.generated.js';
import type { LanguageCodenames } from '../system/languages.generated.js';
import type { ShowType } from '../types/show-type.generated.js';
import type { WorkflowCodenames, WorkflowStepCodenames } from '../system/workflows.generated.js';
           
            /*
* Type representing codename of 'Future shows' type
*/
            export type FutureShowsTypeCodename = keyof Pick<Record<TypeCodenames, null>, "future_shows">;

            /*
* Typeguard for codename of 'Future shows' type
*/
            export function isFutureShowsTypeCodename(value: string | undefined | null): value is FutureShowsTypeCodename {
                return typeof value === 'string' && value === ('future_shows' satisfies FutureShowsTypeCodename);
            }

/*
    * Future shows
    *
    * Id: 1af01b6f-0b46-4c8c-9a92-1e177d11569f
* Codename: future_shows
    */
export type FutureShowsType = IContentItem<
{
/*
    * Shows
    *
    * Codename: shows
* Id: b66bf432-77bc-499b-a215-5bb54a6427a4
* Type: modular_content
* Required: true
* Allowed content types: show
    */
                readonly shows: Elements.LinkedItemsElement<ShowType>;}, 
FutureShowsTypeCodename, LanguageCodenames, CollectionCodenames, WorkflowCodenames, WorkflowStepCodenames>

/*
* Type representing all available element codenames for Future shows
*/
export type FutureShowsTypeElementCodenames = 'shows';;

/*
    * Type guard for Future shows
    *
    * Id: 1af01b6f-0b46-4c8c-9a92-1e177d11569f
* Codename: future_shows
    */
export function isFutureShowsType(item: IContentItem | undefined | null): item is FutureShowsType {
                return item?.system.type === ('future_shows' satisfies FutureShowsTypeCodename);
            };



            