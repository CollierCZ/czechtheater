/*
 * This file has been auto-generated by '@kontent-ai/sync-sdk@9.1.0'.
 * 
 * (c) Kontent.ai
 *  
 * -------------------------------------------------------------------------------
 * 
 * Project: Czech Theater
 * Environment: Production
 * Id: fb599585-baec-0077-1624-981d3321fff0
 * 
 * -------------------------------------------------------------------------------
 */


            import type { AuditionsType } from '../types/auditions-type.generated.js';
import type { ImageWithCaptionType } from '../types/image-with-caption-type.generated.js';
import type { FixedSizeImageType } from '../types/fixed-size-image-type.generated.js';
import type { SeasonType } from '../types/season-type.generated.js';
import type { PastShowsType } from '../types/past-shows-type.generated.js';
import type { FutureShowsType } from '../types/future-shows-type.generated.js';
import type { CallToActionButtonType } from '../types/call-to-action-button-type.generated.js';
import type { ValueType } from '../types/value-type.generated.js';
import type { TrailerType } from '../types/trailer-type.generated.js';
import type { TheaterFactType } from '../types/theater-fact-type.generated.js';
import type { BasicInfoType } from '../types/basic-info-type.generated.js';
import type { ShowType } from '../types/show-type.generated.js';

            /*
* Array of all type codenames
*/
            export const typeCodenames = ['auditions', 'image_with_caption', 'fixed_size_image', 'season', 'past_shows', 'future_shows', 'call_to_action_button', 'value', 'trailer', 'theater_fact', 'basic_info', 'show'] as const;;
           
            /*
* Type representing all type codenames
*/
            export type TypeCodenames = typeof typeCodenames[number];;

            /*
* Typeguard for type codename
*/
            export function isTypeCodename(value: string | undefined | null): value is TypeCodenames {
                return typeof value === 'string' && (typeCodenames as readonly string[]).includes(value);
            };

					 /*
* Core content type with narrowed types. Use this instead of'IContentItem' for increased type safety.
*/
					 export type CoreType = AuditionsType | ImageWithCaptionType | FixedSizeImageType | SeasonType | PastShowsType | FutureShowsType | CallToActionButtonType | ValueType | TrailerType | TheaterFactType | BasicInfoType | ShowType

					/*
* Type mapping for codename & type. Can be used for type safe access to type based on the codename of type.
*/
					export type CodenameTypeMapping = {
	readonly auditions: AuditionsType,
readonly image_with_caption: ImageWithCaptionType,
readonly fixed_size_image: FixedSizeImageType,
readonly season: SeasonType,
readonly past_shows: PastShowsType,
readonly future_shows: FutureShowsType,
readonly call_to_action_button: CallToActionButtonType,
readonly value: ValueType,
readonly trailer: TrailerType,
readonly theater_fact: TheaterFactType,
readonly basic_info: BasicInfoType,
readonly show: ShowType,
};

					/*
* Helper type that returns type based on the codename of type.
*/
					export type CodenameTypeMapper<TTypeCodename extends TypeCodenames> = TTypeCodename extends keyof CodenameTypeMapping ? CodenameTypeMapping[TTypeCodename] : CoreType;
					